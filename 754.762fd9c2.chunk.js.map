{"version":3,"file":"754.762fd9c2.chunk.js","mappings":"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","sources":["webpack:///./src/game/config.ts","webpack:///./src/game/components/camera.tsx","webpack:///./src/assets.ts","webpack:///./src/assets/environment.hdr","webpack:///./src/assets/piece-player-1.png","webpack:///./src/assets/piece-player-2.png","webpack:///./src/assets/tile-rosetta.png","webpack:///./src/assets/tile-eyes.png","webpack:///./src/assets/tile-grid.png","webpack:///./src/assets/tile-dots.png","webpack:///./src/assets/tile-maze.png","webpack:///./src/assets/board-side.png","webpack:///./src/game/components/lights.tsx","webpack:///./src/types.ts","webpack:///./src/game/components/piece.tsx","webpack:///./src/game/components/board.tsx","webpack:///./src/utils.ts","webpack:///./src/game/game.tsx","webpack:///./src/pages/play.tsx"],"sourcesContent":["import { Vector3 } from \"@react-three/fiber\";\n\nconst config = {\n  board: {\n    cols: 3,\n    rows: 8,\n    voidCols: [0, 2] as number[],\n    voidRows: [4, 5] as number[],\n    tileSize: [1, 0.75, 1] as [width: number, height: number, depth: number],\n    pieceRadiusRatio: 0.75,\n    pieceHeightRatio: 0.2,\n    pieceTextureRatio: 2,\n    pieceColors: [\"#86868f\", \"#dbd8bd\"],\n    color: \"#bab8a1\",\n  },\n  camera: {\n    position: [0, 7, 7] as Vector3,\n  },\n} as const;\n\nexport default config;\n","import React from \"react\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport config from \"@/game/config\";\n\nexport default function Camera() {\n  return (\n    <>\n      <PerspectiveCamera makeDefault position={config.camera.position} />\n      <OrbitControls makeDefault />\n    </>\n  );\n}\n","import environment from \"@/assets/environment.hdr\";\nimport piecePlayer1 from \"@/assets/piece-player-1.png\";\nimport piecePlayer2 from \"@/assets/piece-player-2.png\";\nimport tileRosetta from \"@/assets/tile-rosetta.png\";\nimport tileEyes from \"@/assets/tile-eyes.png\";\nimport tileGrid from \"@/assets/tile-grid.png\";\nimport tileDots from \"@/assets/tile-dots.png\";\nimport tileMaze from \"@/assets/tile-maze.png\";\nimport boardSide from \"@/assets/board-side.png\";\n\nconst assets = {\n  environment,\n  piecePlayer1,\n  piecePlayer2,\n  tileRosetta,\n  tileEyes,\n  tileGrid,\n  tileDots,\n  tileMaze,\n  boardSide,\n};\n\nexport default assets;\n","export default __webpack_public_path__ + \"environment.bec864da.hdr\";","export default __webpack_public_path__ + \"piece-player-1.6c9bfd25.png\";","export default __webpack_public_path__ + \"piece-player-2.65ab82ae.png\";","export default __webpack_public_path__ + \"tile-rosetta.5f2a69ef.png\";","export default __webpack_public_path__ + \"tile-eyes.0726d6cd.png\";","export default __webpack_public_path__ + \"tile-grid.e7ac7a10.png\";","export default __webpack_public_path__ + \"tile-dots.d16fe08b.png\";","export default __webpack_public_path__ + \"tile-maze.a5820afb.png\";","export default __webpack_public_path__ + \"board-side.fb3ec2fa.png\";","import React from \"react\";\nimport { Environment } from \"@react-three/drei\";\nimport assets from \"@/assets\";\n\nexport default function Lights() {\n  return (\n    <>\n      <ambientLight />\n      <Environment files={assets.environment} />\n    </>\n  );\n}\n","export type Piece = {\n  playerIndex: number;\n  col: number;\n  row: number;\n};\n\nexport enum Tile {\n  rosetta = \"rosetta\",\n  eyes = \"eyes\",\n  grid = \"grid\",\n  dots = \"dots\",\n  maze = \"maze\",\n  void = \"void\",\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport { Piece as PieceType } from \"@/types\";\nimport assets from \"@/assets\";\nimport config from \"@/game/config\";\n\ntype Props = {\n  piece: PieceType;\n};\n\nexport default function Piece({ piece }: Props) {\n  const gl = useThree((state) => state.gl);\n\n  const textures = useTexture([assets.piecePlayer1, assets.piecePlayer2]);\n  React.useMemo(() => {\n    textures.forEach((texture) => {\n      texture.anisotropy = gl.capabilities.getMaxAnisotropy();\n    });\n  }, [textures, gl]);\n  const settings = React.useMemo(() => {\n    const radius = config.board.tileSize[0] * 0.5 * config.board.pieceRadiusRatio;\n    return {\n      radius,\n      height: config.board.tileSize[1] * config.board.pieceHeightRatio,\n      textureSize: radius * config.board.pieceTextureRatio,\n    };\n  }, []);\n\n  return (\n    <>\n      <mesh>\n        <cylinderGeometry args={[settings.radius, settings.radius, settings.height, 32, 32]} />\n        <meshStandardMaterial color={config.board.pieceColors[piece.playerIndex]} />\n      </mesh>\n      <group position-y={settings.height / 2}>\n        <mesh renderOrder={1} rotation-x={THREE.MathUtils.degToRad(-90)}>\n          <planeGeometry args={[settings.textureSize, settings.textureSize]} />\n          <meshStandardMaterial\n            depthWrite={false}\n            depthTest={false}\n            transparent={true}\n            map={textures[piece.playerIndex]}\n          />\n        </mesh>\n      </group>\n    </>\n  );\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport { Piece as PieceType, Tile } from \"@/types\";\nimport { getTextureIndex, shuffleArray } from \"@/utils\";\nimport Piece from \"@/game/components/piece\";\nimport config from \"@/game/config\";\nimport assets from \"@/assets\";\n\nexport default function Board() {\n  const tileTextures = useTexture([\n    assets.tileRosetta,\n    assets.tileEyes,\n    assets.tileGrid,\n    assets.tileDots,\n    assets.tileMaze,\n  ]);\n  const gl = useThree((state) => state.gl);\n  React.useMemo(() => {\n    tileTextures.forEach((tileTexture) => {\n      tileTexture.anisotropy = gl.capabilities.getMaxAnisotropy();\n    });\n  }, [tileTextures, gl]);\n\n  const tiles = React.useMemo(() => {\n    const tileTypes = [\n      [Tile.rosetta, Tile.eyes, Tile.dots, Tile.eyes, Tile.void, Tile.void, Tile.rosetta, Tile.maze],\n      [Tile.maze, Tile.dots, Tile.grid, Tile.rosetta, Tile.dots, Tile.grid, Tile.eyes, Tile.dots],\n      [Tile.rosetta, Tile.eyes, Tile.dots, Tile.eyes, Tile.void, Tile.void, Tile.rosetta, Tile.maze],\n    ];\n    return Array.from(Array(config.board.cols)).map((_, col) => {\n      return Array.from(Array(config.board.rows)).map((_, row) => {\n        return {\n          col,\n          row,\n          void: config.board.voidCols.includes(col) && config.board.voidRows.includes(row),\n          type: tileTypes[col][row],\n        };\n      });\n    });\n  }, []);\n\n  const [pieces, setPieces] = React.useState<PieceType[]>([]);\n\n  React.useEffect(() => {\n    const testPlayerIndices = [0, 1];\n    setPieces(\n      shuffleArray(tiles.flat().filter((tile) => !tile.void))\n        .slice(0, 5)\n        .map((tile, index) => {\n          return {\n            ...tile,\n            playerIndex: testPlayerIndices[index % 2],\n            col: tile.col,\n            row: tile.row,\n          };\n        })\n    );\n  }, [tiles]);\n\n  return (\n    <group\n      position-x={config.board.tileSize[0] * (-(config.board.rows - 1) / 2)}\n      position-z={config.board.tileSize[0] * ((config.board.cols - 1) / 2)}\n    >\n      <group rotation-y={THREE.MathUtils.degToRad(90)}>\n        {tiles.map((rows, col) => {\n          return (\n            <group key={col} position-x={config.board.tileSize[0] * col}>\n              {rows.map((tile, index) => {\n                if (tile.void) {\n                  return <React.Fragment key={index}></React.Fragment>;\n                }\n                const piece = pieces.find((piece) => {\n                  return piece.col == tile.col && piece.row === tile.row;\n                });\n                return (\n                  <group key={index} position-z={config.board.tileSize[0] * tile.row}>\n                    <mesh>\n                      <boxGeometry args={config.board.tileSize} />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-0\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-1\" />\n                      <meshStandardMaterial map={tileTextures[getTextureIndex(tile.type)]} attach=\"material-2\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-3\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-4\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-5\" />\n                    </mesh>\n                    {piece !== undefined && (\n                      <group\n                        position-y={\n                          config.board.tileSize[1] / 2 + (config.board.tileSize[1] * config.board.pieceHeightRatio) / 2\n                        }\n                      >\n                        <Piece piece={piece} />\n                      </group>\n                    )}\n                  </group>\n                );\n              })}\n            </group>\n          );\n        })}\n      </group>\n    </group>\n  );\n}\n","import { Tile } from \"@/types\";\n\nexport function shuffleArray<T = any>(array: T[]): T[] {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nexport function getTextureIndex(type: Tile): number {\n  const types = Object.values(Tile);\n  return types.indexOf(type);\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport Camera from \"@/game/components/camera\";\nimport Lights from \"@/game/components/lights\";\nimport Board from \"@/game/components/board\";\n\nexport default function Game() {\n  return (\n    <Canvas flat linear legacy>\n      <Lights />\n      <Camera />\n      {/* todo: add a fallback loading component */}\n      <React.Suspense fallback={<></>}>\n        <Board />\n      </React.Suspense>\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport Game from \"@/game/game\";\n\nexport default function Play() {\n  return (\n    <main>\n      <Game />\n    </main>\n  );\n}\n"],"names":["board","cols","rows","voidCols","voidRows","tileSize","pieceRadiusRatio","pieceHeightRatio","pieceTextureRatio","pieceColors","color","camera","position","Camera","React","PerspectiveCamera","makeDefault","config","OrbitControls","environment","piecePlayer1","piecePlayer2","tileRosetta","tileEyes","tileGrid","tileDots","tileMaze","boardSide","Lights","Environment","files","assets","Tile","Piece","_ref","piece","gl","useThree","state","textures","useTexture","forEach","texture","anisotropy","capabilities","getMaxAnisotropy","settings","radius","height","textureSize","args","playerIndex","renderOrder","THREE","depthWrite","depthTest","transparent","map","Board","tileTextures","tileTexture","tiles","tileTypes","rosetta","eyes","dots","maze","grid","Array","from","_","col","row","void","type","pieces","setPieces","testPlayerIndices","array","i","length","j","Math","floor","random","shuffleArray","flat","filter","tile","slice","index","key","find","attach","Object","values","indexOf","undefined","Game","Canvas","linear","legacy","fallback","Play"],"sourceRoot":""}