{"version":3,"file":"603.8be4f8e4.chunk.js","mappings":"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","sources":["webpack:///./src/game/config.ts","webpack:///./src/game/components/camera.tsx","webpack:///./src/assets.ts","webpack:///./src/assets/environment.hdr","webpack:///./src/assets/piece-player-1.png","webpack:///./src/assets/piece-player-2.png","webpack:///./src/assets/tile-1.png","webpack:///./src/assets/tile-2.png","webpack:///./src/assets/tile-3.png","webpack:///./src/assets/tile-4.png","webpack:///./src/assets/tile-5.png","webpack:///./src/game/components/lights.tsx","webpack:///./src/game/components/piece.tsx","webpack:///./src/game/components/board.tsx","webpack:///./src/utils.ts","webpack:///./src/game/game.tsx","webpack:///./src/pages/play.tsx"],"sourcesContent":["import { Vector3 } from \"@react-three/fiber\";\n\nconst config = {\n  board: {\n    cols: 3,\n    rows: 8,\n    voidCols: [0, 2] as number[],\n    voidRows: [4, 5] as number[],\n    tileSize: [1, 0.75, 1] as [width: number, height: number, depth: number],\n    pieceRadiusRatio: 0.75,\n    pieceHeightRatio: 0.2,\n    pieceTextureRatio: 2,\n    pieceColors: [\"#86868f\", \"#dbd8bd\"],\n    color: \"#bab8a1\",\n  },\n  camera: {\n    position: [0, 7, 7] as Vector3,\n  },\n} as const;\n\nexport default config;\n","import React from \"react\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport config from \"@/game/config\";\n\nexport default function Camera() {\n  return (\n    <>\n      <PerspectiveCamera makeDefault position={config.camera.position} />\n      <OrbitControls makeDefault />\n    </>\n  );\n}\n","import environment from \"@/assets/environment.hdr\";\nimport piecePlayer1 from \"@/assets/piece-player-1.png\";\nimport piecePlayer2 from \"@/assets/piece-player-2.png\";\nimport tile1 from \"@/assets/tile-1.png\";\nimport tile2 from \"@/assets/tile-2.png\";\nimport tile3 from \"@/assets/tile-3.png\";\nimport tile4 from \"@/assets/tile-4.png\";\nimport tile5 from \"@/assets/tile-5.png\";\n\nconst assets = {\n  environment,\n  piecePlayer1,\n  piecePlayer2,\n  tile1,\n  tile2,\n  tile3,\n  tile4,\n  tile5,\n};\n\nexport default assets;\n","export default __webpack_public_path__ + \"environment.bec864da.hdr\";","export default __webpack_public_path__ + \"piece-player-1.6c9bfd25.png\";","export default __webpack_public_path__ + \"piece-player-2.65ab82ae.png\";","export default __webpack_public_path__ + \"tile-1.e7ac7a10.png\";","export default __webpack_public_path__ + \"tile-2.0726d6cd.png\";","export default __webpack_public_path__ + \"tile-3.a5820afb.png\";","export default __webpack_public_path__ + \"tile-4.5f2a69ef.png\";","export default __webpack_public_path__ + \"tile-5.d16fe08b.png\";","import React from \"react\";\nimport { Environment } from \"@react-three/drei\";\nimport assets from \"@/assets\";\n\nexport default function Lights() {\n  return (\n    <>\n      <ambientLight />\n      <Environment files={assets.environment} />\n    </>\n  );\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\nimport { Piece as PieceType } from \"@/types\";\nimport assets from \"@/assets\";\nimport config from \"@/game/config\";\n\ntype Props = {\n  piece: PieceType;\n};\n\nexport default function Piece({ piece }: Props) {\n  const gl = useThree((state) => state.gl);\n\n  const textures = useTexture([assets.piecePlayer1, assets.piecePlayer2]);\n  React.useMemo(() => {\n    textures.forEach((texture) => {\n      texture.anisotropy = gl.capabilities.getMaxAnisotropy();\n    });\n  }, [textures, gl]);\n  const settings = React.useMemo(() => {\n    const radius = config.board.tileSize[0] * 0.5 * config.board.pieceRadiusRatio;\n    return {\n      radius,\n      height: config.board.tileSize[1] * config.board.pieceHeightRatio,\n      textureSize: radius * config.board.pieceTextureRatio,\n    };\n  }, []);\n\n  return (\n    <>\n      <mesh>\n        <cylinderGeometry args={[settings.radius, settings.radius, settings.height, 32, 32]} />\n        <meshStandardMaterial color={config.board.pieceColors[piece.playerIndex]} />\n      </mesh>\n      <group position-y={settings.height / 2}>\n        <mesh renderOrder={1} rotation-x={THREE.MathUtils.degToRad(-90)}>\n          <planeGeometry args={[settings.textureSize, settings.textureSize]} />\n          <meshStandardMaterial\n            depthWrite={false}\n            depthTest={false}\n            transparent={true}\n            map={textures[piece.playerIndex]}\n          />\n        </mesh>\n      </group>\n    </>\n  );\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useTexture } from \"@react-three/drei\";\nimport { Piece as PieceType } from \"@/types\";\nimport { shuffleArray } from \"@/utils\";\nimport Piece from \"@/game/components/piece\";\nimport config from \"@/game/config\";\nimport assets from \"@/assets\";\n\nexport default function Board() {\n  const tileTextures = useTexture([assets.tile1, assets.tile2, assets.tile3, assets.tile4, assets.tile5]);\n\n  const tiles = React.useMemo(() => {\n    return Array.from(Array(config.board.cols)).map((_, col) => {\n      return Array.from(Array(config.board.rows)).map((_, row) => {\n        const rosettaTiles = [\n          { row: 0, col: 0 },\n          { row: 0, col: 2 },\n        ];\n        function getTextureIndex(row: number, col: number): number {\n          const rosettaTile = rosettaTiles.find((tile) => {\n            return tile.row === row && tile.col === col;\n          });\n          if (rosettaTile !== undefined) {\n            return 3;\n          }\n          return 0;\n        }\n        return {\n          col,\n          row,\n          void: config.board.voidCols.includes(col) && config.board.voidRows.includes(row),\n          textureIndex: getTextureIndex(row, col),\n        };\n      });\n    });\n  }, []);\n\n  const [pieces, setPieces] = React.useState<PieceType[]>([]);\n\n  React.useEffect(() => {\n    const testPlayerIndices = [0, 1];\n    setPieces(\n      shuffleArray(tiles.flat().filter((tile) => !tile.void))\n        .slice(0, 5)\n        .map((tile, index) => {\n          return {\n            playerIndex: testPlayerIndices[index % 2],\n            col: tile.col,\n            row: tile.row,\n          };\n        })\n    );\n  }, [tiles]);\n\n  return (\n    <group\n      position-x={config.board.tileSize[0] * (-(config.board.rows - 1) / 2)}\n      position-z={config.board.tileSize[0] * ((config.board.cols - 1) / 2)}\n    >\n      <group rotation-y={THREE.MathUtils.degToRad(90)}>\n        {tiles.map((rows, col) => {\n          return (\n            <group key={col} position-x={config.board.tileSize[0] * col}>\n              {rows.map((tile, index) => {\n                if (tile.void) {\n                  return <React.Fragment key={index}></React.Fragment>;\n                }\n                const piece = pieces.find((piece) => {\n                  return piece.col == tile.col && piece.row === tile.row;\n                });\n                return (\n                  <group key={index} position-z={tile.row * config.board.tileSize[0]}>\n                    <mesh>\n                      <boxGeometry args={config.board.tileSize} />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-0\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-1\" />\n                      <meshStandardMaterial map={tileTextures[tile.textureIndex]} attach=\"material-2\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-3\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-4\" />\n                      <meshStandardMaterial color={config.board.color} attach=\"material-5\" />\n                    </mesh>\n                    {piece !== undefined && (\n                      <group\n                        position-y={\n                          config.board.tileSize[1] / 2 + (config.board.tileSize[1] * config.board.pieceHeightRatio) / 2\n                        }\n                      >\n                        <Piece piece={piece} />\n                      </group>\n                    )}\n                  </group>\n                );\n              })}\n            </group>\n          );\n        })}\n      </group>\n    </group>\n  );\n}\n","export function shuffleArray<T = any>(array: T[]): T[] {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport Camera from \"@/game/components/camera\";\nimport Lights from \"@/game/components/lights\";\nimport Board from \"@/game/components/board\";\n\nexport default function Game() {\n  return (\n    <Canvas flat linear legacy>\n      <Lights />\n      <Camera />\n      {/* todo: add a fallback loading component */}\n      <React.Suspense fallback={<></>}>\n        <Board />\n      </React.Suspense>\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport Game from \"@/game/game\";\n\nexport default function Play() {\n  return (\n    <main>\n      <Game />\n    </main>\n  );\n}\n"],"names":["board","cols","rows","voidCols","voidRows","tileSize","pieceRadiusRatio","pieceHeightRatio","pieceTextureRatio","pieceColors","color","camera","position","Camera","React","PerspectiveCamera","makeDefault","config","OrbitControls","environment","piecePlayer1","piecePlayer2","tile1","tile2","tile3","tile4","tile5","Lights","Environment","files","assets","Piece","_ref","piece","gl","useThree","state","textures","useTexture","forEach","texture","anisotropy","capabilities","getMaxAnisotropy","settings","radius","height","textureSize","args","playerIndex","renderOrder","THREE","depthWrite","depthTest","transparent","map","Board","tileTextures","tiles","Array","from","_","col","row","rosettaTiles","void","textureIndex","undefined","find","tile","getTextureIndex","pieces","setPieces","testPlayerIndices","array","i","length","j","Math","floor","random","shuffleArray","flat","filter","slice","index","key","attach","Game","Canvas","linear","legacy","fallback","Play"],"sourceRoot":""}